
R version 4.0.5 (2021-03-31) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> # Length distribution of the features
> # Mac, R/3.5.2
> ################################################################################
> # FLAGS * FLAGS * FLAGS * FLAGS * FLAGS * FLAGS * FLAGS * FLAGS * FLAGS * FLAGS
> ### DIRECTORY STRUCTURE ########################################################
> ### OTHER SETTINGS #############################################################
> whorunsit = "LiezelMac" # "LiezelMac", "LiezelCluster", "LiezelLinuxDesk",
> # "AlexMac", "AlexCluster"
> 
> # Expands warnings
> options(warn=1)
> 
> if( !is.null(whorunsit[1]) ){
+   # This can be expanded as needed ...
+   if(whorunsit == "LiezelMac"){
+     home.dir = paste0("/Users/ltamon")
+     wk.dir = paste0(home.dir, "/SahakyanLab/GenomicContactDynamics/7_FeaturePermutation")
+   } else if(whorunsit == "LiezelCluster"){
+     home.dir = "/project/sahakyanlab/ltamon"
+     wk.dir = paste0(home.dir, "/DPhil/GenomicContactDynamics/20_ChromFeatAssoc")
+   } else {
+     print("The supplied <whorunsit> option is not created in the script.", quote=FALSE)
+   }
+ }
> lib = paste0(home.dir, "/DPhil/lib")
> data.dir = paste0(home.dir, "/Database")
> 
> data.id = "reduced" # raw | reduced
> foi.dir = paste0(data.dir, "/funx_data_fixCoordSys/masterpool_hg19_convTo1based/", data.id, "_repeats")
> # List of filenames of features of interest (refer to foi.dir)
> # If foifile = NULL, all files in foi.dir
> foifile = NULL #paste0(wk.dir, "/foifile/foifile_TF")
> out.dir = paste0(wk.dir, "/out_foi_lengthdist")
> ### OTHER SETTINGS #############################################################
> out.name = paste0("foi_lengthdist_", data.id, "_repeats")
> bin.len = 40000
> ################################################################################
> # LIBRARIES & DEPENDANCES * LIBRARIES & DEPENDANCIES * LIBRARIES & DEPENDANCES *
> ################################################################################
> library(ggplot2)
> library(ggpubr)
> source(paste0(lib, "/GG_bgr.R"))
> source(paste0(lib, "/finaliseFOI.R"))
> ################################################################################
> # MAIN CODE * MAIN CODE * MAIN CODE * MAIN CODE * MAIN CODE * MAIN CODE *
> ################################################################################
> # List of features
> foi.v <- finaliseFOI(foi.dir=foi.dir, foifile=foifile)
> foi.v.len <- length(foi.v)
> 
> toExport <- c("out.dir", "foi.v", "foi.dir")
> 
> p.lst <- list()
> min.lst <- list()
> for(foi in foi.v){
+ 
+   # Only get the start and stop coordinates
+   foi.bed <- read.table(file=paste0(foi.dir, "/", foi), stringsAsFactors=FALSE, 
+                         header=FALSE)[,1:3]
+   
+   foi <- gsub(x=foi, pattern="ct\\_|foi\\_|desc\\_|\\.bed", replacement="")
+   df <- data.frame( length=log10(foi.bed[,3]-foi.bed[,2]+1L) )
+   min.lst[[foi]] <- min(df$length)
+   
+   v <- round( c(min(df[,1]), max(df[,1])), digits=2)
+   
+   # Density plot
+   p.lst[[foi]] <- ggplot(data=df, aes(x=length)) +
+     geom_density(position="identity", fill="deepskyblue3", 
+                  colour="deepskyblue3") + 
+     #scale_x_continuous(limits=c(1,10)) + 
+     #scale_y_continuous(limits=c(0,80)) +
+     geom_vline(xintercept=log10(bin.len), lty=2) + 
+     labs(title=foi, 
+          y=expression(bold( "Density" )), 
+          x=bquote( bold("log"["10"]~"(L"^"foi"~")") ) 
+     ) +
+     bgr2 + 
+     theme(plot.title=element_text(size=10))
+   if(length(unique(v))!=1){
+     p.lst[[foi]] <- p.lst[[foi]] + 
+       annotate(geom="text", x=v, y=-0.1, size=7, label=v)
+   }  
+   
+   rm(foi.bed); gc()
+   
+   print(paste0(foi, " done!"), quote=FALSE)
+   
+ }
[1] hg19_acro_repFamily done!
[1] hg19_Alu_repFamily done!
[1] hg19_centr_repFamily done!
[1] hg19_CR1_repFamily done!
[1] hg19_Deu_repFamily done!
[1] hg19_DNA_repFamily done!
[1] hg19_DNA?_repFamily done!
[1] hg19_Dong-R4_repFamily done!
[1] hg19_ERV_repFamily done!
[1] hg19_ERV1_repFamily done!
[1] hg19_ERVK_repFamily done!
[1] hg19_ERVL_repFamily done!
[1] hg19_ERVL-MaLR_repFamily done!
[1] hg19_ERVL?_repFamily done!
[1] hg19_Gypsy_repFamily done!
[1] hg19_Gypsy?_repFamily done!
[1] hg19_hAT_repFamily done!
[1] hg19_hAT-Blackjack_repFamily done!
[1] hg19_hAT-Charlie_repFamily done!
[1] hg19_hAT-Tip100_repFamily done!
[1] hg19_hAT?_repFamily done!
[1] hg19_Helitron_repFamily done!
[1] hg19_Helitron?_repFamily done!
[1] hg19_L1_repFamily done!
[1] hg19_L1?_repFamily done!
[1] hg19_L2_repFamily done!
[1] hg19_Low_complexity_repFamily done!
[1] hg19_LTR_repFamily done!
[1] hg19_LTR?_repFamily done!
[1] hg19_Merlin_repFamily done!
[1] hg19_MIR_repFamily done!
[1] hg19_MuDR_repFamily done!
[1] hg19_nontransposon_repeat done!
[1] hg19_Other_repFamily done!
[1] hg19_Penelope?_repFamily done!
[1] hg19_PiggyBac_repFamily done!
[1] hg19_PiggyBac?_repFamily done!
[1] hg19_repeat_repeat done!
[1] hg19_RNA_repFamily done!
[1] hg19_rRNA_repFamily done!
[1] hg19_RTE_repFamily done!
[1] hg19_RTE-BovB_repFamily done!
[1] hg19_Satellite_repFamily done!
[1] hg19_scRNA_repFamily done!
[1] hg19_Simple_repeat_repFamily done!
[1] hg19_SINE_repFamily done!
[1] hg19_SINE?_repFamily done!
[1] hg19_snRNA_repFamily done!
[1] hg19_srpRNA_repFamily done!
[1] hg19_TcMar_repFamily done!
[1] hg19_TcMar-Mariner_repFamily done!
[1] hg19_TcMar-Tc2_repFamily done!
[1] hg19_TcMar-Tigger_repFamily done!
[1] hg19_TcMar?_repFamily done!
[1] hg19_telo_repFamily done!
[1] hg19_transposon_repeat done!
[1] hg19_tRNA_repFamily done!
[1] hg19_Unknown_repFamily done!
[1] hg19_Unknown?_repFamily done!
> 
> min.lst <- sort(unlist(min.lst, use.names=TRUE), decreasing=FALSE)
> ind <- match(names(min.lst), names(p.lst))
> 
> p.lst <- ggarrange(plotlist=p.lst[ind], nrow=3, ncol=6,
+                    common.legend=TRUE, legend="right")
> ggexport(p.lst, width=52, height=24,
+          filename=paste0(out.dir, "/", out.name, ".pdf"))
file saved to /Users/ltamon/SahakyanLab/GenomicContactDynamics/7_FeaturePermutation/out_foi_lengthdist/foi_lengthdist_reduced_repeats.pdf
> 
> # rm(list=ls()); gc()
> 
