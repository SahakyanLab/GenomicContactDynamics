Loading R-cbrg/current
  Loading requirement: gsl/2.6 hdf5/1.10.7

R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ################################################################################
> # Compare contact matrices
> ################################################################################
> # FLAGS * FLAGS * FLAGS * FLAGS * FLAGS * FLAGS * FLAGS * FLAGS * FLAGS * FLAGS
> ### DIRECTORY STRUCTURE ########################################################
> start.time <- Sys.time()
> 
> whorunsit = "LiezelCluster" # "LiezelMac", "LiezelCluster", "LiezelLinuxDesk",
> # "AlexMac", "AlexCluster"
> 
> if( !is.null(whorunsit[1]) ){
+   # This can be expanded as needed ...
+   if(whorunsit == "LiezelMac"){
+     lib = "/Users/ltamon/DPhil/lib"
+     data.dir = "/Users/ltamon/Database"
+     wk.dir = "/Users/ltamon/DPhil/GenomicContactDynamics/21_Simulation"
+   } else if(whorunsit == "LiezelCluster"){
+     lib = "/t1-data/user/ltamon/DPhil/lib"
+     data.dir = "/t1-data/user/ltamon/Database"
+     wk.dir = "/t1-data/user/ltamon/DPhil/GenomicContactDynamics/21_Simulation"
+   } else {
+     stop("The supplied <whorunsit> option is not created in the script.", quote=FALSE)
+   }
+ }
> chrLenfile = paste0(data.dir, "/genome_info/Hsa_GRCh37_73_chr_info.txt")
> Cs.raw.dir = paste0(data.dir, "/GSE87112/combined_contacts/RAW_primary_cohort")
> Cs.norm.dir = Cp.dir = paste0(data.dir, "/GSE87112/combined_contacts/HiCNorm_primary_cohort")
> CII.disc.kmer.5.dir = CII.cont.kmer.5.dir = "/t1-data/user/ltamon/DPhil/GenomicContactDynamics/polished/11_Constraints/out_group"
> SIM.3.2.kmer.5.dir = paste0(wk.dir, "/sim_3.2_non")
> SIM.4.2.kmer.5.dir = paste0(wk.dir, "/sim_4.2")
> out.dir = paste0(wk.dir, "/out_compare")
> ### OTHER SETTINGS #############################################################
> gcb = "min2Mb"
> chr = "chr1"
> ct = "AG"
> bin.len = 40000
> 
> # Metric name should match source directory name.
> # 5 in "CII.disc.kmer.5" is the cutoff percentage for categorisation. disc means
> # discrete (categorised CII), cont means continuouos (orig CII). 
> # <CII/SIM>.<disc/cont>.<kmer/align>.<(0,100)>
> metric.v = c(subj="SIM.3.2.kmer.5", ref="Cs.norm")
> 
> # Filtering contacts
> # If both incl.bin.x and incl.bin.y lists are NULL, use whole chr. 
> incl.x = 'incl.bin.x = NULL'
> incl.y = 'incl.bin.y = NULL'
> mask.x = 'mask.bin.x = list(3001:6232)' #'mask.bin.x = list(3039:6232)'
> mask.y = 'mask.bin.y = list(1:3563)'  #'mask.bin.y = list(1:3563)' 
> # If vector gap.range is NULL, no filtering. 
> gap.v = 'gap.range = c(50, Inf)'
> out.id = "whole_maskMidSquare_gap50up_non"
> 
> # Minimum value to be contact, input as string so I can print it out
> c.subj = 'c.offsubj.v = c( -0.0001, seq(0,0.004,0.0001), seq(0.005,0.01,0.001), seq(0.02,0.06, 0.01) )'
> c.ref  = 'c.offref.v = c( -0.05, seq(0,5,0.05) )'
> 
> #c.subj = 'c.offsubj.v = c( -0.0001, seq(0,0.004,0.0001), seq(0.005,0.01,0.001), seq(0.02,0.06, 0.01) )'
> #c.ref  = 'c.offref.v = c( -0.02, seq(0,1,0.02), seq(1.2,1.8,0.2), seq(2,20,2) )'
> nCPU = 3L #~8G per core
> 
> boxplotOnly = FALSE
> makeBoxplotValues = FALSE
> ################################################################################
> # LIBRARIES & DEPENDENCIES * LIBRARIES & DEPENDENCIES * LIBRARIES & DEPENDENCIES 
> ################################################################################
> library(data.table)
> library(compiler)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> library(itertools)
> source(paste0(lib, "/UTL_doPar.R"))
[1] Running with 3 cores.
> source(paste0(wk.dir, "/lib/getContactDF.R"))
> source(paste0(wk.dir, "/lib/compareContactMx.R"))
> source(paste0(wk.dir, "/lib/filterContacts.R"))
> ################################################################################
> # MAIN CODE * MAIN CODE * MAIN CODE * MAIN CODE * MAIN CODE * MAIN CODE *
> ################################################################################
> id <- paste(paste(names(metric.v), metric.v, sep="_"), collapse="_")
> out.name <- paste(gcb, chr, ct, out.id, id, sep="_"); rm(id)
> print(paste0(out.name, "..."), quote=FALSE)
[1] min2Mb_chr1_AG_whole_maskMidSquare_gap50up_non_subj_SIM.3.2.kmer.5_ref_Cs.norm...
> 
> if(boxplotOnly){ print("Only making boxplot...", quote=FALSE) }
> 
> print(incl.x, quote=FALSE) 
[1] incl.bin.x = NULL
> print(incl.y, quote=FALSE) 
[1] incl.bin.y = NULL
> print(mask.x, quote=FALSE) 
[1] mask.bin.x = list(3001:6232)
> print(mask.y, quote=FALSE) 
[1] mask.bin.y = list(1:3563)
> print(gap.v, quote=FALSE) 
[1] gap.range = c(50, Inf)
> print(c.subj, quote=FALSE)
[1] c.offsubj.v = c( -0.0001, seq(0,0.004,0.0001), seq(0.005,0.01,0.001), seq(0.02,0.06, 0.01) )
> print(c.ref, quote=FALSE)
[1] c.offref.v = c( -0.05, seq(0,5,0.05) )
> 
> eval(parse(text=incl.x))
> eval(parse(text=incl.y))
> eval(parse(text=mask.x))
> eval(parse(text=mask.y))
> eval(parse(text=gap.v))
> eval(parse(text=c.subj))
> eval(parse(text=c.ref))
> rm(incl.x, incl.y, mask.x, mask.y, gap.v, c.subj, c.ref)
> 
> genome <- read.table(file=chrLenfile, stringsAsFactors=FALSE, header=TRUE,
+                      colClasses=c("character", "integer", "integer"))
> mx.len <- ceiling(genome$length.bp[genome$chromosome==chr]/bin.len)
> if(mx.len!=genome$bins.40kb[genome$chromosome==chr]){ stop("mx.len wrong") } 
> rm(genome)
> temp <- expand.grid(1:mx.len, 1:mx.len)
> temp <- temp[temp[,1]>temp[,2],]
> 
> MX <- list()
> if(makeBoxplotValues){
+   png(file=paste0(out.dir, "/", out.name, ".png"), width=6000, height=3000, res=300)
+   par(mfrow=c(2,4))
+ }
> 
> for(m in c("subj", "ref")){
+   
+   metric <- unname(metric.v[m])
+   eval(parse(text=paste0(
+     'metric.dir <- ', metric, '.dir'
+   )))
+    
+   # Upper triangle
+   df <- getContactDF(metric.dir=metric.dir, metric=metric, 
+                      gcb=gcb, chr=chr, ct=ct, gap.range=gap.range, 
+                      incl.bin.x=incl.bin.x, incl.bin.y=incl.bin.y, 
+                      mask.bin.x=mask.bin.x, mask.bin.y=mask.bin.y)
+   if( nrow(df)!=((mx.len*mx.len)-mx.len)/2 ){
+     stop("Wrong number of upper triangle contacts.") 
+   }
+   if( any(is.na(df$value)) & !grepl(x=metric, pattern="CII.|SIM.") ){
+     stop("NA values in df.")
+   }
+   
+   # Change value of unwanted contacts to NA
+   df$value[df$include==0] <- NA
+   
+   # Scale sd by values
+   if( metric%in%c("Cs.raw", "Cs.norm") ){
+     df$value <- (df$value)/sd(x=df$value, na.rm=TRUE)
+     print("Scaling Cs values by sd...", quote=FALSE)
+   }
+   
+   # Reorder
+   df <- df[order(df$i, df$j),]
+   # Converted to lower matrix df
+   colnames(df) <- c("j", "i", "value")
+   df$value <- as.numeric(df$value)
+   
+   MX[[m]] <- matrix(data=NA, nrow=mx.len, ncol=mx.len)
+   if( !identical(as.numeric(df$i), as.numeric(temp$Var1)) | 
+       !identical(as.numeric(df$j), as.numeric(temp$Var2)) ){
+     stop("Order of df wrong.")
+   }
+   
+   MX[[m]][ lower.tri(MX[[m]], diag=FALSE) ] <- df$value
+   # Fill upper triangle only so transpose
+   MX[[m]] <- t(MX[[m]])
+   
+   #-------------------Fix cut-off values and make boxplots
+   
+   # Store for boxplot
+   v <- sort(df$value, decreasing=FALSE)
+   rm(df); gc()
+   
+   # Use min and max to bound cut-off ranges.
+   max.v <- tail(unique(v), n=2)
+   min.v <- min(v[v!=0], na.rm=TRUE)
+   
+   if( (sum(v%in%max.v)!=2) & metric%in%c("Cs.norm", "Cs.raw") ){
+     print("Cut-off max checkpoint.")
+   }
+   
+   if(metric!="Cp"){
+     
+     eval(parse(text=paste0(
+       "c.off", m, ".v <- c.off", m, ".v[c.off", m, ".v<max.v[1]]; 
+       c.off", m, ".v <- sort(c(c.off", m, ".v, max.v)); 
+       last3 <- tail(c.off", m, ".v, n=3);
+       c.off", m, ".v <- sort(unique(c(c.off", m, ".v, seq(last3[1], last3[2], length.out=10))))"
+     )))
+     rm(last3)
+     
+   }
+   
+   # Boxplot
+   if(makeBoxplotValues){
+     
+     p.title <- paste0(out.name, "_", metric.v[m], "_min=", min.v, "_max=", max.v[2])
+     
+     if( !grepl(x=metric, pattern="CII.") ){
+       v.nZero <- v[v!=0 & !is.na(v)]
+       boxplot(x=v.nZero, outline=FALSE, ylab="Value",
+               main=paste0(p.title, "_no0sNoOutliers"), cex.main=0.5)
+       boxplot(x=v.nZero, outline=TRUE, ylab="Value",
+               main=paste0(p.title, "_no0sWithOutliers"), cex.main=0.5)
+     }
+     boxplot(x=v, outline=FALSE, ylab="Value",
+             main=paste0(p.title, "_AllNoOutliers"), cex.main=0.5)
+     boxplot(x=v, outline=TRUE, ylab="Value",
+             main=paste0(p.title, "_AllWithOutliers"), cex.main=0.5)
+     
+     rm(v.nZero, p.title)
+     
+   }
+   
+   rm(max.v, min.v, v)
+   
+ }
[1] No selection of contacts...
[1] Masking contacts with i in mask.bin.y and j in mask.bin.x...
[1] Gap filtering...
[1] SIM.3.2.kmer.5 done!
[1] No selection of contacts...
[1] Masking contacts with i in mask.bin.y and j in mask.bin.x...
[1] Gap filtering...
[1] Cs.norm done!
[1] Scaling Cs values by sd...
Warning message:
In rm(MELT.MX, value) : object 'value' not found
> rm(temp); gc()
            used  (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells    503337  26.9   27632783 1475.8  39355896 2101.9
Vcells 113993480 869.8  429773317 3279.0 659871381 5034.5
> if(makeBoxplotValues){ dev.off() }
> 
> if(boxplotOnly==FALSE){
+   COMPIJMX <- compareContactMx(MXsubj=MX$subj, MXref=MX$ref, 
+                                c.offsubj.v=c.offsubj.v, 
+                                c.offref.v=c.offref.v,  
+                                incl.bin.x=NULL, incl.bin.y=NULL,
+                                mask.bin.x=NULL, mask.bin.y=NULL,
+                                gap.range=NULL, nCPU=nCPU)
+   write.csv(COMPIJMX, file=paste0(out.dir, "/", out.name, ".csv"),
+             row.names=FALSE)
+ }
[1] No selection of contacts...
[1] No masking of contacts...
> rm(MX); gc()
           used  (Mb) gc trigger   (Mb)  max used   (Mb)
Ncells   512179  27.4   17684982  944.5  39355896 2101.9
Vcells 36436014 278.0  343818654 2623.2 659871381 5034.5
> 
> end.time <- Sys.time()
> end.time-start.time 
Time difference of 9.97978 hours
> 
> # rm(list=ls()); gc()
> 
+--------------------------------------------------------------+
|   This is the CCB job profiler for your job. For help with   |
|   the results, please contact genmail@molbiol.ox.ac.uk       |
+--------------------------------------------------------------+
REQUESTED    : 7-00:00:00
JOB RUN TIME : Days 0, Hours 9, Minutes 58, Seconds 48
UTILISATION  : 5.94047619048%
DEBUG        : 604800 35928 5.94047619048
+--------------------------------------------------------------+
|                    LOW TIME UTILISATION                      |
|   Requesting roughly the correct amount of time (e.g. an     |
|   hour, a day or a week) can help your job start sooner.     |
+--------------------------------------------------------------+
+--------------------------------------------------------------+
|                         CPU Profiling                        |
+--------------------------------------------------------------+
REQUESTED    : 4 CPU cores
MAX USAGE    : 3.886 CPU cores
UTILISATION  : 75.646875% of allocated CPU over job time
DEBUG        : 4 3.886 75.646875 

Max|*                                                           
   |**                                                          
   |************************************************************
 C |************************************************************
 P |************************************************************
 U |************************************************************
   |************************************************************
 % |************************************************************
   |************************************************************
   |************************************************************
Min+------------------------------------------------------------
   Start                      Job Time                       End

+--------------------------------------------------------------+
|                       Memory Profiling                       |
+--------------------------------------------------------------+
REQUESTED    : 30.0GB
MAX USAGE    : 14800292.0 KB, 14453.41 MB, 14.11 GB
UTILISATION  : 47.0247368585% of allocated memory over job time
DEBUG        : 30.0 14.11 47.0247368585 
+--------------------------------------------------------------+
|                        LOW MEMORY USAGE                      |
|   Requesting an additional 25% to 50% memory is typically a  |
|   sufficient safety margin for your jobs.                    |
+--------------------------------------------------------------+

Max|************************************************************
   |************************************************************
   |************************************************************
 M |************************************************************
 e |************************************************************
 m |************************************************************
 o |************************************************************
 r |************************************************************
 y |************************************************************
   |************************************************************
Min+------------------------------------------------------------
   Start                      Job Time                       End

