################################################################################
# LIBRARIES & DEPENDANCES * LIBRARIES & DEPENDANCIES * LIBRARIES & DEPENDANCES *
################################################################################
PERSIST.MX
~/Database/ucsc_tables/hsa_RepeatMasker/RepeatMasker_hg19

library(foreach)
library(doParallel) 
library(itertools) 
library(GenomicRanges)
library(compiler)
library(data.table)
library(viridis)
library(ComplexHeatmap)
library(factoextra)
library(cluster)

source(paste0(lib, "/TrantoRextr/GEN_WhichOverlap.R"))
source(paste0(lib, "/TrantoRextr/GEN_getRepMaskSubset.R"))
source(paste0(wk.dir, "/lib/GEN_getBinsOverlapRepMasker2.R"))
source(paste0(lib, "/doVenn.R"))
################################################################################
# A. Calculation of repeat site distribution metrics and other intermediate
# files
################################################################################
0. Make list (.RData) of families and subfamilies that are and are not transposons.
1. Count insertion sites of repeats in each contact region (any type of overlap).
Output: bin X repeats

> BINREP.MX[1:5,1:8]
     bins startpos  endpos MIR L1 TcMar-Tigger Alu hAT-Charlie
[1,]  236  9400001 9440000   1 12            0   7           0
[2,]  237  9440001 9480000   0 25            2   9           2
[3,]  238  9480001 9520000   5 12            2   0           4
[4,]  239  9520001 9560000   6  8            0   6           3
[5,]  240  9560001 9600000   0 18            1  22           2

2. Using BINREP.MX, calculate the following contact-wise repeat site distribution 
metrics:

a. minrep = or shared number, minimum value of two repeat site counts from two
regions of a contact. 
b. skwerep = like GC skew, take absolute difference of two site counts of contact
then divide by the their sum
c. sumrep = take sum of the two site counts of a contact

filterMinVal argument, set to 2 in the analyses, filtered for contacts with at 
least 2 site counts per contact coming from either region (i.e. sumrep of contact
is 2)

> MINELM.MX[1005:1015,1:8]
      ntis MIRb L1ME2 L1PA7 MIRc L1PB4 Tigger1 AluSc
 [1,]    6    0     0     0    1     0       0     0
 [2,]   11    0     0     0    0     0       0     0
 [3,]   11    2     0     0    1     0       0     0
 [4,]   15    2     0     0    0     0       0     0
 [5,]   12    2     0     0    2     0       0     0
 
Only repeat families/subfamilies relevant for the chr is included in its matrix.

2. (binning) Does the same thing as (2) but groups repeat elements to make the
resulting heatmap cleaner. Uses MINELM.MX from (2) as starting point. For the
example refer to MINELM.MX above. If bin=3, MIRb, LIME2 and L1PA7 will be grouped
together and will be represented as 1 row in the heatmap. The code takes the
sum of these three columns per contact and the value is the total number of pairs 
of sites of MIRb/L1ME2/L1PA7 in the contact. Pairs of sites should be formed by the
same repeat.

2. (plot) Make density of MINREP.MX values (log10 transformed). This was used to 
generate the distribution of sumrep values.

2. (filter) Script specific for filtering MINREP.MX sumrep based on sumrep value.

2.5. Extracts MINELM.MX values per Cp (generating output per chromosome).
Output: MINREPCOUNT and plot
> MINREPCOUNTS$MARNA
$`1`
       0        1        2        3        4 
19665919    25555     1017       23        1 

$`2`
       0        1        2        3 
19212334    27524     1080       38 

$`3`
       0        1        2        3 
16378719    24805     1053       29 

MINREPCOUNT is a list of data for 372 repeat subfamilies in the age rank. This data
is a list from cp=1 to cp=21 of the occurrence of the minimum repeat count. 
For example:
MINREPCOUNTS$MARNA
$`1`
       0        1        2        3        4 
19665919    25555     1017       23        1
means that 19665919 cp=1 contacts have no minimum repeat count or shared number of 
repeats, 25555 contacts have minimum repeat count of 1 and so on.

Age ranking used is ./Repeat_rankingbyAge/plot_GiorPubl372rankrepFamilies.csv
containing 372 repeat subfamilies.

2.5. (combine) The script combines MINREPCOUNTS from all chromosomes (except chr. Y) and using the
makeMinRepPlot() function, generates the boxplot of MINREP.MX values across Cp and 
optionally can generate PREELMTISSDYN.MX, which has data on the mean values of the 
distribution per Cp. This mean values is needed for the heatmap of the contact-wise 
metrics. Mean values instead of median because median may not show subtle trends
observed and can be equal across Cp.Hence, for the new and final metrics the 
A4_HicRepeatHeatmapData.R is not anymore needed to generate the PREELMTISSDYN.MX. 
In this version of PREELMTISSDYN.MX, num.contacts row consists of 1 so the same mean 
values will be in ELMTISSDYN.MX for making the heatmap and doing correlations. A csv 
file per element is also generated containing number of datapoints (contacts) per Cp. 

3. Identify repeat subfamilies not present in all chromosomes. There are 16
of these subfamilies out of the 372 in the repeat age ranking. 
At first I thought of removing these subfamilies but Alex suggested that it
should not be the case because in this case, contacts should not be distinguished
based on chr. We don't care whether contacts in a cp are not from all chr. 

chr	number	agerankNotincl
chr1	1	Charlie12
chr2	0	
chr3	1	Charlie12
chr4	1	Charlie12
chr5	0	
chr6	0	
chr7	0	
chr8	1	Charlie12
chr9	0	
chr10	1	Charlie12
chr11	2	Charlie11;Charlie12
chr12	0	
chr13	2	Charlie12;SVA_E
chr14	2	MER6C;Charlie12
chr15	4	Charlie11;Charlie6;L1P;Charlie12
chr16	1	MER97b
chr17	3	Charlie11;Charlie6;Charlie12
chr18	1	Charlie12
chr19	5	Charlie11;Charlie6;Ricksha;Charlie3;MER61A
chr20	5	Charlie6;MER97b;Charlie12;MLT-int;AluYd8
chr21	3	Charlie4;MER97b;Charlie12
chr22	7	MER97c;MER97b;MSTD-int;Ricksha;L1P;Charlie12;LTR10F
chrX	1	Charlie12

agerankNotincl - repeats not in that chr
number - number of repeat not in that chr

4. (This script is not needed for the minrep, skewrep and sumrep metrics)
Per chr, per cp, per repeat subfamily, count number of contacts with non0 shared
number that repeat or non0 minimum repeat count. In other words, count the contact
if it shares at least 1 site of that repeat. This is in contrast to calculating the
total shared number (mininum repeat count) of contacts. Given that seq i has 2 L3
sites while seq j has 3, the shared number of L3 between the two sequences is 2.
With the first approach, the answer is 1 because we count the ij contact since they 
have a non0 shared number of L3 which is 2. We don't care about the actual shared 
number of L3 sites. In the second approach we total the shared number of sites 
so the answer is 2. 

Output: PREELMTISSDYN.MX

PREELMTISSDYN.MX is set to contain data on all elements in agerank although some
chr don't have data on some elements in agerank. If this is the case, value for
all cps for this element is 0. 

chr21 example
> head(PREELMTISSDYN.MX)
                 1     2     3     4     5     6     7     8
num.contacts 24980 27129 27807 27864 27603 27015 25450 23933
MARNA           12    18    20    31    32    25    27    39
L1MEd           71   100   127   107   151   134   153   145
L3            1225  1584  1739  1923  2183  2375  2333  2230
L1ME4a        1160  1410  1584  1711  1836  1813  1758  1671
L4             410   452   470   531   571   578   557   505

Both approaches should be done to get more information about the enrichment
of repeats in contacts. For instance having high number of contacts with
non0 minimum repeat count may not mean that each contact have a lot of 
common repeat sites. Also, a high total number of shared sites may be just
due to a number of contacts. 

Current data did the first approach. 

4.5. Merge PREELMTISSDYN.MX of all chr.
Sum matrices from all chr. They should have the same dimension since they contain
data on elements in agerank arranged in the same order.

Note:
subfam_skewrep_mean/
subfam_minrep_mean/
Data in these directories generated when I tried using mean() instead of median()
in A4_HicRepeatHeatmapData.R. Not relevant for the final plots.

5. Generate ELMTISSDYN.MX and generate final heatmap. This can be done from 
individual PREELMTISSDYN.MX of chr or the combined PREELMTISSDYN.MX dataset. 
Values here are the PREELMTISSDYN.MX values divided by num.contacts (in first 
row of PREELMTISSDYN.MX) per cp. 
                    1           2           3
MARNA     0.001404696 0.001548674 0.001645757
Charlie11 0.000000000 0.000000000 0.000000000
L1MEd     0.006480432 0.006490887 0.006528045
L3        0.153715866 0.159759100 0.163123272
L1ME4a    0.125408766 0.131207118 0.133568645
L4        0.026963240 0.028958250 0.030045769

This ELMTISSDYN.MX is used for the raw, normalised and fold change version of 
the heatmap.
The raw heatmap will use the values from ELMTISSDYN.MX. For the normalised ones,
z-scores are calculated per element:
ELMTISSDYN.MX.norm[i,] <- (ELMTISSDYN.MX[i,] - mean(ELMTISSDYN.MX[i,]))/
                           sd(ELMTISSDYN.MX[i,])
where i denotes a row (an element).	  
For the log2 fold change, the reference is raw Cp=1.

To further depict the relationship of age and contact persistence,  weighted mean 
$c_p$ was calculated per row by multiplying each value by the corresponding $c_p$ 
and then taking the mean of the products. A loess line was then fitted via the 
smooth argument (smooth=TRUE) of ComplexHeatmap::anno_lines(), which is used to 
annotate heatmaps made using ComplexHeatmap. 

The new and final version of the script calculates correlation between value with
Cp dimension so mean value per Cp vs. 1 to 21 Cp values and then save each
correlation result. If addLoess is true, it will plot the correlation coefficient
per (chosen to be Mann-Kendall by default because it is said to work better
for small number of values and gives lower values than Spearman) and then it
will fit a loess line to the correlation coefficients. Coefficients of 
non-significant correlations are not plotted. Alpha is set to be 0.05. A lineplot
for each row in all versions of heatmap is also generated along with a density plot
of all values in the heatmap across Cps to see the range of values in each heatmap
generated. A text file of key numbers is also generated per heatmap. 


6. Cluster repeats based on trend. Three clustering ways used:
kmeans (euclidean), pam (euclidean), pam (manhattan). Venn is generated to
compare differences in clustering across methods. 

7. Cluster trends of individual subfamilies in each bin for a given size.
In the plot, the centers are in blue, the dominant subfamilies (>=10% raw fraction
of contacts) are in red and the rest of the subfamilies are in grey. 
################################################################################
# B. Site count vs. average Cp
################################################################################
1. Count insertion sites of repeats in ALL bins of a chromosome. The BINREP.MX 
object only contacts count of sites for bins forming a long-range contact. 

2. Plots of insertion sites vs. weighted mean Cp or average Cp

3. Plot repeat site count vs. average Cp (wmeanCp or wmeanCp0) per bin. Perform
correlation of the two per repeat subfamily/family. There are two versions of 
output:

out_sitesVsmeanCp_binsWithNoSiteIncluded
out_sitesVsmeanCp_binsWithSiteOnlyIncluded

4. Generate scatter and heatmap summary plots of correlations from (3).
################################################################################
# C. Final plots for thesis
################################################################################
1. Plot for contact-wise metrics combining results from correlation and clustering
method to determine trend of metrics across Cp. 

2. Similar plot as (1) but for the results of the correlation of region-wise site
count with average Cp described in (B). 
################################################################################
# D.
################################################################################
0. Generate dataframe containing repeat subfamilies (repNames) and their repeat family and class. Also contains grouping of repeat subfamilies based on GROUP.CLASS argument.There are 1395 unique subfamilies but output contains 1397 rows because there are two repeat subfamilies classified into two families and classes.

1. Per element/subfamily, calculate stats pertaining to genome coverage and range of site length. Append also copy number calculated previously. This was modifiedto directly calculate copy number and to not include chr. Y sites in the calculation.

2. # Per subfamily, determine number of contacts of given Cp or Cp range with at # least 1 shared number of site. Cps.forCalc is a list of Cp or Cp range to use.# If Cps.forCalc pertains to more than 1 Cp value, the number would be determined# using all contacts within Cp range.

3. # Per subfamily, determine median or mean (estimate.fnx argument) value of # metrics of contacts of given Cp or Cp range with at least 1 shared number of # site. Cps.forCalc is a list of Cp or Cp range to use. If Cps.forCalc pertains # to more than 1 Cp value, the number would be determined using all contacts # within Cp range. Compare distributions of each Cp or Cp range in Cps.forCalc.

4. # Calculate per subfamily the percentage of contacts with measured metrics so# contacts with at least 2 sites relative to number of long-range contacts per# Cp. 



